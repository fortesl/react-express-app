import { createStore, combineReducers } from 'redux';
import uuid from 'uuid';

//action generators
const addExpense = (
    {
        description, 
        note ='', 
        amount = 0,
        createdAt = new Date().getTime()
    } = {}
) => ({
    type: 'ADD_EXPENSE',
    expense: {
        description,
        note,
        amount,
        id: uuid(),
        createdAt    
    } 
});

const removeExpense = (id) => ({
    type: 'REMOVE_EXPENSE',
    id
});

const editExpenses = (id, updates) =>({
    type: 'EDIT_EXPENSE',
    id,
    updates
});

const setTextFilter = (text ='') => ({
    type: 'SET_TEXT_FILTER',
    text
});

const sortByDate = () => ({
    type: 'SORT_BY_DATE'
});

const sortByAmount = () => ({
    type: 'SORT_BY_AMOUNT'
});

const setStartDate = (startDate) => ({
    type: 'SET_START_DATE',
    startDate
});

const setEndDate = (endDate) => ({
    type: 'SET_END_DATE',
    endDate
});

//expenses Reducer
const expensesReducerDefaultState = [];
const expensesReducer = (state = expensesReducerDefaultState, action) =>
{
    switch (action.type) {
        case 'ADD_EXPENSE':
            return [action.expense, ...state];
        case 'REMOVE_EXPENSE':
            return state.filter(({ id }) => id !== action.id);
        case 'EDIT_EXPENSE':
            return state.map((expense) => expense.id !== action.id ? expense : {...expense, ...action.updates});
        default:
            return state;
    }
};

//filters Reducer
const filtersReducerDefaultState = {
    text: '',
    sortBy: 'date',
    startDate: undefined,
    endDate: undefined
};
const filtersReducer = (state = filtersReducerDefaultState, action) =>
{
    switch (action.type) {
        case 'SET_TEXT_FILTER':
            return { ...state, 'text': action.text };
        case 'SORT_BY_DATE':
            return {...state, 'sortBy': 'date'};
        case 'SORT_BY_AMOUNT':
            return {...state, 'sortBy': 'amount'};
        case 'SET_START_DATE':
            return {...state, 'startDate': action.startDate};
        case 'SET_END_DATE':
            return {...state, 'endDate': action.endDate};
        default:
            return state;
    }
};

const getVisibleExpenses = (expenses, { text, sortBy, startDate, endDate } = {}) => {
    return expenses.filter((expense) => {
        const startDateMatch = typeof startDate != 'number' || expense.createdAt >= startDate;
        const endDateMatch  = typeof endDate != 'number' || expense.createdAt <= endDate;
        const textMatch = !text || expense.description.toLowerCase().includes(text.toLowerCase());

        return startDateMatch && endDateMatch && textMatch;
    }).sort((a, b) => {
        if (sortBy === 'date') {
            return a.createdAt < b.createdAt ? 1 : -1;
        } else if (sortBy === 'amount') {
            return a.amount < b.amount ? 1 : -1; 
        } else {
            return 0;
        }
    });
};

//store creation
const store = createStore(combineReducers({
    expenses: expensesReducer,
    filter: filtersReducer
}));

store.subscribe(() => {
    const state = store.getState();
    const visibleExpenses = getVisibleExpenses(state.expenses, state.filter);
    console.log(visibleExpenses);
});

    
const expenseOne = store.dispatch(addExpense({
    description: 'first expense',
    note: 'this is the first expense',
    amount: 200,
    createdAt: 100
}));

const expenseTwo = store.dispatch(addExpense({
    description: 'second expense',
    note: 'this is the second expense',
    amount: 100,
    createdAt: 500
}));

// store.dispatch(removeExpense(expenseOne.expense.id));
// store.dispatch(editExpenses(expenseTwo.expense.id, { amount: 500 }));

// store.dispatch(setTextFilter('first'));
store.dispatch(sortByAmount());
// store.dispatch(sortByDate());

// store.dispatch(setStartDate(125));
// store.dispatch(setEndDate(1250));

const defaultState = {
    expenses: [{
        id: 'fdsadsfsa',
        description: 'January rent',
        note: 'final payment',
        amount: 54500,
        createdAt: 0
    }],
    filters: {
        text: 'rent',
        sortBy: 'amount', // date or amount
        startDate: undefined,
        endDate: undefined
    }
};
